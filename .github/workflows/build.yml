name: Build

on: [push, pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: [ubuntu-22.04, ubuntu-20.04, macos-12, macos-11, windows-latest]
        # python-version: ["3.7", "3.8", "3.9", "3.10"]
        os: [macos-12]
        python-version: ["3.7"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install wheel
          pip install -r requirements.txt

      - name: Run tests
        run: pytest -s -rs

  release:
    runs-on: ubuntu-latest

    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: test

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install packaging dependencies
        run: pip install wheel

      - name: Update version
        run: sed -i 's/__version__ = "dev"/__version__ = "'"${GITHUB_REF##*/}"'"/g' lean/__init__.py

      - name: Build package
        run: python setup.py sdist bdist_wheel

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  portable:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: [ubuntu-22.04, macos-12, windows-latest]
        os: [macos-12]
        python-version: ["3.10"]

    # on a new tag (release), after 'test' and 'release' have ended we will run this
    # TODO: undo after testing
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    # needs: [test, release]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Wait for pip release, sleep in seconds
        run: sleep 1
        shell: bash

      - name: Setup Portable
        run: pip install pyinstaller lean
        shell: bash

      - name: Create Portable Windows & Linux
        if: matrix.os == 'windows-latest' || matrix.os == 'ubuntu-22.04'
        run: |
          mkdir portable
          cd portable
          pyinstaller ../scripts/main.spec
        shell: bash

      - name: Create Portable Macos
        if: matrix.os == 'macos-12' || matrix.os == 'macos-11'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          KEYCHAIN_PASSWORD: 'KEYCHAINPASSWORD'
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $KEYCHAIN_PASSWORD build.keychain
          security import certificate.p12 -k build.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD build.keychain
          security find-identity -v
          mkdir portable
          cd portable
          pyinstaller ../scripts/main.spec
          cd dist/lean-cli
          /usr/bin/codesign --deep --force --timestamp -o runtime -s CY5GJ9682W ./lean-cli -v
          find . -iname '*.so' -or -iname '*.dylib'| while read libfile; do /usr/bin/codesign --timestamp --deep -o runtime --force -s CY5GJ9682W "${libfile}"; done;
        shell: bash

      - name: Get OS Name Without Version
        run: echo "OS_NAME=$(echo ${{ matrix.os }} | sed 's/-.*//')" >> $GITHUB_ENV
        shell: bash

      - name: Zip package and notarize Macos
        if: matrix.os == 'macos-12'
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_ID }}
        run: |
          xcrun notarytool store-credentials --apple-id $APPLE_ID --password $APPLE_PASSWORD --team-id $APPLE_TEAM_ID
          cd portable/dist/lean-cli
          ditto -c -k --keepParent . ../lean-${{ matrix.os }}.zip
          cd ..
          xcrun notarytool submit lean-${{ matrix.os }}.zip --keychain-profile $APPLE_ID --wait
          cp lean-${{ matrix.os }}.zip lean-latest-${{env.OS_NAME}}.zip


      - name: Zip package Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd portable/dist/lean-cli
          7z a -tzip ../lean-latest-${{env.OS_NAME}}.zip .
          7z a -tzip ../lean-${{ matrix.os }}.zip .
        shell: bash

      - name: Zip package Ubuntu
        if: matrix.os == 'ubuntu-22.04'
        run: |
          cd portable/dist/lean-cli
          zip -r ../lean-latest-${{env.OS_NAME}}.zip .
          zip -r ../lean-${{ matrix.os }}.zip .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: us-west-1

      - name: Publish To S3
        run: |
          aws s3 cp portable/dist/lean-latest-${{env.OS_NAME}}.zip s3://${{ secrets.AWS_BUCKET }}/ --content-type "application/zip"
          aws s3 cp portable/dist/lean-${{ matrix.os }}.zip s3://${{ secrets.AWS_BUCKET }}/${{env.OS_NAME}}/ --content-type "application/zip"
        shell: bash

      # only update version file once.
      - name: Update version information
        if: matrix.os == 'ubuntu-22.04'
        run: |
          echo '{ "version": 1.2 }' > portable/latest.json
          aws s3 cp portable/latest.json s3://${{ secrets.AWS_BUCKET }}/ --content-type "text/plain"
        shell: bash

      - name: Cleanup
        run: |
          rm -rf portable
        shell: bash
